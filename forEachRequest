package org.KarateEjemplo;



import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.*;

public class forEachRequest {
    public static void main(String[] args) throws IOException, ParseException {

        String url_raw = "";
        JSONObject urlRequest = null;
        File archivo;
        String UrlEndpoint = null;
        String bodyRequestData = null;
        FileWriter escritor;
        JSONParser jsonParser = new JSONParser();
        //ubicar en una mejor posicion dentro de la estructura de carpetas
        FileReader reader = new FileReader("C:\\Users\\maxim\\IdeaProjects\\KarateEjemplo\\src\\main\\java\\org\\KarateEjemplo\\jsonData\\collection_example.postman_collection.json");




        Object obj=jsonParser.parse(reader);
        JSONObject empjsonobj = (JSONObject)obj;
        JSONArray JsonArrayInfo = (JSONArray) empjsonobj.get("item");
        JSONArray JsonArrayEvent = (JSONArray) empjsonobj.get("event");
        JSONArray JsonArrayVar = (JSONArray) empjsonobj.get("variable");
        JSONObject JsonInfoCollection = (JSONObject) empjsonobj.get("info");
        String nombreCollection = (String) JsonInfoCollection.get("name");

        //Se genera carpeta con el nombre de la collection
        File carpeta = new File(nombreCollection);
        if (!carpeta.exists()) {
            if (carpeta.mkdirs()) {
                System.out.println("Carpeta Collection creada");
            } else {
                System.out.println("Error al crear directorio , revise sus permisos");
            }
        }
boolean TokenExistente = false;
//VALIDAR SI EXISTE DENTRO DE LOS REQUEST UNA LLAMADA TOKEN
        for (int i = 0 ;i < JsonArrayInfo.size(); i++) {

            JSONObject jsonData = (JSONObject) JsonArrayInfo.get(i);
            String nameScenario = (String) jsonData.get("name");
            if(nameScenario.equals("TOKEN")){
                TokenExistente=true;
            }
        }
        System.out.println(TokenExistente);
        for (int i = 0 ;i < JsonArrayInfo.size(); i++){

            JSONObject jsonData = (JSONObject) JsonArrayInfo.get(i);
            String nameScenario = (String) jsonData.get("name");



            System.out.println("Nombre del scenario "+nameScenario);
            try{
                archivo = new File(nombreCollection+"/"+nameScenario+".feature");
                if (archivo.createNewFile()){
                    System.out.println("Se ha creado la feature");
                    escritor =new FileWriter(archivo.getAbsolutePath());
                    escritor.write("Feature: "+nameScenario+"\n");
                    escritor.write("\n  Background:\n");
                    escritor.write("\n  * configure ssl = true \n");
                    if(!nameScenario.equals("TOKEN") && TokenExistente){
                        escritor.write("   * call read('TOKEN.feature')\n");
                        escritor.write("   * header Authorization = authToken\n");
                    }
                    escritor.write("\n\n");
                    escritor.write("  Scenario: "+nameScenario+"\n");

                    JSONObject jsonRequest = (JSONObject) jsonData.get("request");
                    JSONArray headerRequest = (JSONArray) jsonRequest.get("header");
                    String requestMethod = (String) jsonRequest.get("method");
                    JSONObject bodyRequest = (JSONObject) jsonRequest.get("body");
                    boolean metodosActualesConBody = requestMethod.equals("POST") || requestMethod.equals("PATCH") || requestMethod.equals("PUT");
                    boolean contieneBody = true;
                    var urlRequest_get = jsonRequest.get("url");

                    for (int j = 0 ;j < headerRequest.size(); j++){
                        JSONObject jsonHeader = (JSONObject) headerRequest.get(j);
                        Boolean estadoHeader = (Boolean) jsonHeader.get("disabled");
                        String nombreHeader = (String) jsonHeader.get("key");
                        String valorHeader =  (String) jsonHeader.get("value");

                        if (estadoHeader == null) {
                            if(nombreHeader.equals("Authorization") && !(nameScenario.equals("TOKEN"))){
                                System.out.println("ESTE SCENARIO TIENE AUTHORIZATION Y NO ES EL TOKEN POR LO TANTO NO SE ESCRIBE");

                            }else {
                                escritor.write("  * header " + nombreHeader + " = '" + valorHeader + "'\n");
                                System.out.println("ESTE CASO NO ES EL TOKEN Y SE ESCRIBE SU AUTORIZACION");
                                System.out.println(nombreHeader + valorHeader);
                            }
                        }
                    }

                    if (bodyRequest == null){
                        contieneBody=false;
                        System.out.println("No contiene body por lo cual o esta recien inicializado o es un get");
                    }
                    if(contieneBody){
                        if(metodosActualesConBody){
                            String bodyRequestType = (String) bodyRequest.get("mode");
                            
                            if(bodyRequestType.equals("raw")){
                                bodyRequestData = (String) bodyRequest.get("raw");
                                escritor.write("   * def bodyRequest =\n\"\"\"\n"+bodyRequestData+"\n\"\"\"\n");
                            } else if (bodyRequestType.equals("urlencoded")) {
                                JSONArray JsonArrayInfoBodyENCONDED = (JSONArray) bodyRequest.get("urlencoded");

                                for (int Z = 0 ;Z < JsonArrayInfoBodyENCONDED.size(); Z++){
                                    JSONObject jsonDataEncoded = (JSONObject) JsonArrayInfoBodyENCONDED.get(i);
                                    String key = (String) jsonDataEncoded.get("key");
                                    String value = (String) jsonDataEncoded.get("value");
                                    escritor.write("   And form field "+key+" = "+"'"+value+"'");
                                    escritor.write("\n");
                                    System.out.println(key);
                                    System.out.println(value);
                                }
                                System.out.println("ES EL TOKEN");
                            }else{
                                System.out.println("N/A");
                            }


                        }
                        System.out.println("REQUEST GET INGRESADA CON BODY VACIO O NULO , SE IGNORA BODY");
                    }


                    //SIEMPRE QUE LA URL SEA UN OBJETO, DADO QUE PUEDE VENIR EN TEXTO PLANO O EN UN OBJETO
                    if(urlRequest_get instanceof JSONObject){
                        System.out.println("tipoObjeto");
                        JSONObject url_obj = (JSONObject) jsonRequest.get("url");
                        url_raw = (String) url_obj.get("raw");
                        String url_raw_mod = url_raw.replace("{{","'+");
                        String url_raw_mod2 = url_raw_mod.replace("}}","+'");
                        //ESCRITURA URL
                        escritor.write("   Given url '"+url_raw_mod2+"'\n");
                    }else if(urlRequest_get instanceof String){
                        //REVISAR Y LIMPIAR
                        System.out.println("Es de tipo String");
                        url_raw = (String) jsonRequest.get("url");
                        String url_raw_mod = url_raw.replace("{{","'+");
                        String url_raw_mod2 = url_raw_mod.replace("}}","'+");
                        escritor.write("   Given url '"+url_raw_mod2+"'\n");
                    }else{
                        System.out.println("Se escapa de las excepciones");
                    }

                    //pasando parametros de body
                    if(contieneBody){
                    if(metodosActualesConBody){
                        String bodyRequestType = (String) bodyRequest.get("mode");

                        if(bodyRequestType.equals("raw")){
                            escritor.write("     And request bodyRequest\n");
                        } else if (bodyRequestType.equals("urlencoded")) {
                            System.out.println("ES EL TOKEN");
                        }else{
                            System.out.println("N/A");
                        }


                    }
                    }

                    escritor.write("   When method "+requestMethod+"\n");
                    escritor.write("   Then status 200\n");
                    escritor.write("   And print response\n");
                    if(nameScenario.equals("TOKEN")){
                        escritor.write("   * def authToken = 'Bearer ' + response.access_token\n");
                    }
                    escritor.write("\n\n\n");


                    escritor.close();
                }
            }catch (IOException e){
                System.err.println("No se creo la feature");
            }
        }



    }
}
